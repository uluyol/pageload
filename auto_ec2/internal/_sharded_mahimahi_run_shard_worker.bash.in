#!/usr/bin/env bash

EMULATE_DEVICES_CSV="%%EMULATE_DEVICES%%"

IFS=,
EMULATE_DEVICES=($EMULATE_DEVICES_CSV)
unset IFS

DEVICE_CONFIGS='[{
            "device": {
                "title": "iphone6",
                "screen": {
                    "horizontal": {"width": 667, "height": 375},
                    "device-pixel-ratio": 2,
                    "vertical": {"width": 375, "height": 667}
                },
                "user-agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4"
            }
        },{
            "device": {
                "title": "nexus6",
                "screen": {
                    "horizontal": {"width": 732, "height": 412},
                    "device-pixel-ratio": 3.5,
                    "vertical": {"width": 412, "height": 732}
                },
                "user-agent": "Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.20 Mobile Safari/537.36"
            }
        },{
            "device": {
                "title": "nexus10",
                "screen": {
                    "horizontal": {"width": 1280, "height": 800},
                    "device-pixel-ratio": 2,
                    "vertical": {"width": 800, "height": 1280}
                },
                "user-agent": "Mozilla/5.0 (Linux; Android 4.3; Nexus 10 Build/JSS15Q) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2307.2 Safari/537.36"
            }
        }]'

clean_url() {
	local site=$1
	if [[ ${site: -1} == "/" ]]; then
		site=${site:0: -1}
	fi
	if [[ $site =~ ^http:// ]]; then
		site=${site:7}
	elif [[ $site =~ ^https:// ]]; then
		site=${site:8}
	fi
	if [[ $site =~ ^www\. ]]; then
		site=${site:4}
	fi
	echo "$site" \
		| sed \
			-e 's,/,_,g' \
			-e 's,?,__,g' \
			-e 's,%,__,g' \
			-e 's,&,__,g'
}

date

# assume that $HOME/shard_dl has already been created
# should be created by run_shard.bash

iter=0
while true; do
	start=$(date +%s)

	IFS=$'\n'
	sites=($(<$HOME/sites_worker_%%WORKER_ID%%))
	unset IFS

	for site in "${sites[@]}"; do
		for dev in "${EMULATE_DEVICES[@]}"; do
			mkdir -p $HOME/shard_dl/$dev/$iter || true

			dev_json=$(jq ".[] | select(.device.title == \"$dev\").device" <<<"$DEVICE_CONFIGS")
			user_agent=$(jq -r '."user-agent"' <<<"$dev_json")
			win_w=$(jq -r '.screen.vertical.width' <<<"$dev_json")
			win_h=$(jq -r '.screen.vertical.height' <<<"$dev_json")

			echo iter $iter get $site dev $dev
			(
			sudo docker run --rm -i --privileged \
				-v $HOME/shard_dl/$dev/$iter:/out \
				%%MM_IMAGE%% \
					bash -c "
						timeout 25 \
							xvfb-run --server-args='-screen 0, 1920x1080x16' \
								dbus-launch --exit-with-session \
									google-chrome \
									--ignore-certificate-errors \
									--user-agent \"$user_agent\" \
									--window ${win_w}x${win_h} \
									--user-data-dir=/tmp/fresh \
									http://example.com; \
						timeout 120 \
							xvfb-run --server-args='-screen 0, 1920x1080x16' \
								dbus-launch --exit-with-session \
									mm-webrecord /out/$(clean_url $site) \
										google-chrome \
											--ignore-certificate-errors \
											--user-agent \"$user_agent\" \
											--window ${win_w}x${win_h} \
											--user-data-dir=/tmp/fresh \
											\"$site\""
			) || true
			echo iter $iter get $site dev $dev
		done
	done
	end=$(( start + (%%RECORD_TIME_MIN%% * 60) ))
	while (( $(date +%s) < end )); do
		sleep 5
	done
	(( iter = iter + 1 ))
done

