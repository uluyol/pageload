#!/usr/bin/env bash

EMULATE_DEVICES_CSV="%%EMULATE_DEVICES%%"
USER_PROFILES_CSV=%%USER_PROFILES%%"

IFS=,
EMULATE_DEVICES=($EMULATE_DEVICES_CSV)
USER_PROFILES=($USER_PROFILES)
unset IFS

DEVICE_CONFIGS='[{
            "device": {
                "title": "iphone6",
                "screen": {
                    "horizontal": {"width": 667, "height": 375},
                    "device-pixel-ratio": 2,
                    "vertical": {"width": 375, "height": 667}
                },
                "user-agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4"
            }
        },{
            "device": {
                "title": "nexus6",
                "screen": {
                    "horizontal": {"width": 732, "height": 412},
                    "device-pixel-ratio": 3.5,
                    "vertical": {"width": 412, "height": 732}
                },
                "user-agent": "Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.20 Mobile Safari/537.36"
            }
        },{
            "device": {
                "title": "nexus10",
                "screen": {
                    "horizontal": {"width": 1280, "height": 800},
                    "device-pixel-ratio": 2,
                    "vertical": {"width": 800, "height": 1280}
                },
                "user-agent": "Mozilla/5.0 (Linux; Android 4.3; Nexus 10 Build/JSS15Q) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2307.2 Safari/537.36"
            }
        },
        {
            "device": {
                "title": "sgn3",
                "screen": {
                    "horizontal": {"width": 640, "height": 360},
                    "device-pixel-ratio": 3,
                    "vertical": {"width": 360, "height": 640}
                },
                "user-agent": "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30"
            }
        },
        {
            "device": {
                "title": "oneplus3",
                "screen": {
                    "horizontal": {"width": 640, "height": 360},
                    "device-pixel-ratio": 3,
                    "vertical": {"width": 360, "height": 640}
                },
                "user-agent": "Mozilla/5.0 (Linux; Android 6.0.1; ONEPLUS A3000 Build/MMB29M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.98 Mobile Safari/537.36"
            }
        }]'

clean_url() {
	local site=$1
	if [[ ${site: -1} == "/" ]]; then
		site=${site:0: -1}
	fi
	if [[ $site =~ ^http:// ]]; then
		site=${site:7}
	elif [[ $site =~ ^https:// ]]; then
		site=${site:8}
	fi
	if [[ $site =~ ^www\. ]]; then
		site=${site:4}
	fi
	echo "$site" \
		| sed \
			-e 's,/,_,g' \
			-e 's,?,__,g' \
			-e 's,%,__,g' \
			-e 's,&,__,g'
}

date

# assume that $HOME/shard_dl has already been created
# should be created by run_shard.bash

iter=$1

echo pull image
sudo docker pull %%MM_IMAGE%% &>/dev/null || true

sleep $((RANDOM % 30))

for ((_loopiter=0; _loopiter < 10; _loopiter++)); do
	start=$(date +%s)

	IFS=$'\n'
	sites=($(<$HOME/sites_worker_%%WORKER_ID%%))
	unset IFS

	for site in "${sites[@]}"; do
		for dev in "${EMULATE_DEVICES[@]}"; do
			dev_json=$(jq ".[] | select(.device.title == \"$dev\").device" <<<"$DEVICE_CONFIGS")
			user_agent=$(jq -r '.["user-agent"]' <<<"$dev_json")
			win_w=$(jq -r '.screen.vertical.width' <<<"$dev_json")
			win_h=$(jq -r '.screen.vertical.height' <<<"$dev_json")

			echo user agent: $user_agent
			echo win size: ${win_w}x${win_h}

			for profile in "${USER_PROFILES[@]}"; do
				mkdir -p $HOME/shard_dl/$dev/$iter.$profile.0/hars || true
				mkdir -p $HOME/shard_dl/$dev/$iter.$profile.1/hars || true
				if [[ ! -f $HOME/shard_dl/$dev/$iter.$profile.0/start ]]; then
					(date; date +%s) > $HOME/shard_dl/$dev/$iter.$profile.0/start
				fi
				if [[ ! -f $HOME/shard_dl/$dev/$iter.$profile.1/start ]]; then
					(date; date +%s) > $HOME/shard_dl/$dev/$iter.$profile.1/start
				fi

				echo iter $iter get $site dev $dev prof $profile
				for ((try=0; try < 5; try++)); do
					(
					sudo docker run --rm --privileged \
						-v $HOME/shard_dl/$dev/$iter.$profile.0:/out \
						%%MM_IMAGE%% \
							record_mm_har.bash \
								%%CHROME_INIT_LOAD_WAIT%% \
								%%CHROME_STARTUP_WAIT%% \
								%%SITE_LOAD_WAIT%% \
								/out/$(clean_url $site) \
								/out/hars/$(clean_url $site) \
								"$site" \
								"$user_agent" \
								"${win_w}x${win_h}"
					) &>/dev/null || true
					if [[ -d $HOME/shard_dl/$dev/$iter.$profile.0/$(clean_url $site) && -f $HOME/shard_dl/$dev/$iter.$profile.0/hars/$(clean_url $site) ]]; then
						break
					fi
				done
				for ((try=0; try < 5; try++)); do
					(
					sudo docker run --rm --privileged \
						-v $HOME/shard_dl/$dev/$iter.$profile.1:/out \
						%%MM_IMAGE%% \
							record_mm_har.bash \
								%%CHROME_INIT_LOAD_WAIT%% \
								%%CHROME_STARTUP_WAIT%% \
								%%SITE_LOAD_WAIT%% \
								/out/$(clean_url $site) \
								/out/hars/$(clean_url $site) \
								"$site" \
								"$user_agent" \
								"${win_w}x${win_h}"
					) &>/dev/null || true
					if [[ -d $HOME/shard_dl/$dev/$iter.$profile.1/$(clean_url $site) && -f $HOME/shard_dl/$dev/$iter.$profile.1/hars/$(clean_url $site) ]]; then
						break
					fi
				done
				if [[ -d $HOME/shard_dl/$dev/$iter.$profile.0/$(clean_url $site) && -d $HOME/shard_dl/$dev/$iter.$profile.1/$(clean_url $site) ]]; then
					echo iter $iter got $site dev $dev prof $profile
				else
					echo iter $iter fail $site dev $dev prof $profile
				fi
			done
		done
	done
	end=$(( start + (%%RECORD_TIME_MIN%% * 60) ))
	while (( $(date +%s) < end )); do
		sleep 5
	done
	(( iter = iter + 1 ))
done

